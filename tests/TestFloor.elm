module TestFloor exposing (floorTest)

import Test exposing (..)
import Expect exposing (equal)

import TestData exposing (dataFloat)
import Round

dataFloor0 =
  [ "0"
  , "0"
  , "0"
  , "0"
  , "0"
  , "99"
  , "9"
  , "0"
  , "0"
  , "0"
  , "-99"
  , "-10"
  , "-1"
  , "-1"
  , "-1"
  , "1"
  , "1"
  , "1"
  , "1"
  , "-1"
  , "-2"
  , "-2"
  , "-2"
  , "213"
  , "213"
  , "213"
  , "213"
  , "-213"
  , "-214"
  , "-214"
  , "-214"
  , "5"
  , "5"
  , "5"
  , "5"
  , "-6"
  , "-6"
  , "-6"
  , "-6"
  , "4"
  , "4"
  , "4"
  , "4"
  , "-5"
  , "-5"
  , "-5"
  , "-5"
  ]

dataFloor1 =
  [ "0.0"
  , "0.0"
  , "0.0"
  , "0.0"
  , "0.0"
  , "99.0"
  , "9.9"
  , "0.9"
  , "0.0"
  , "0.0"
  , "-99.0"
  , "-9.9"
  , "-1.0"
  , "-0.1"
  , "-0.1"
  , "1.0"
  , "1.1"
  , "1.0"
  , "1.0"
  , "-1.0"
  , "-1.1"
  , "-1.1"
  , "-1.1"
  , "213.0"
  , "213.1"
  , "213.0"
  , "213.0"
  , "-213.0"
  , "-213.1"
  , "-213.1"
  , "-213.1"
  , "5.5"
  , "5.5"
  , "5.5"
  , "5.5"
  , "-5.5"
  , "-5.6"
  , "-5.6"
  , "-5.6"
  , "4.9"
  , "4.9"
  , "4.9"
  , "4.9"
  , "-4.9"
  , "-5.0"
  , "-5.0"
  , "-5.0"
  ]

dataFloor2 =
  [ "0.00"
  , "0.00"
  , "0.00"
  , "0.00"
  , "0.00"
  , "99.00"
  , "9.90"
  , "0.99"
  , "0.09"
  , "0.00"
  , "-99.00"
  , "-9.90"
  , "-0.99"
  , "-0.10"
  , "-0.01"
  , "1.00"
  , "1.10"
  , "1.01"
  , "1.00"
  , "-1.00"
  , "-1.10"
  , "-1.01"
  , "-1.01"
  , "213.00"
  , "213.10"
  , "213.01"
  , "213.00"
  , "-213.00"
  , "-213.10"
  , "-213.01"
  , "-213.01"
  , "5.50"
  , "5.55"
  , "5.55"
  , "5.55"
  , "-5.50"
  , "-5.55"
  , "-5.56"
  , "-5.56"
  , "4.90"
  , "4.99"
  , "4.99"
  , "4.99"
  , "-4.90"
  , "-4.99"
  , "-5.00"
  , "-5.00"
  ]

floorTest : Test
floorTest =
    describe "floor"
      <| ( List.map2
            (\a b -> 
              test ("floor 0 "++(toString b)++" to "++a) 
              <| \() -> equal a (Round.floor 0 b))
            dataFloor0
            dataFloat
         )
      ++ ( List.map2
            (\a b -> 
              test ("floor 1 "++(toString b)++" to "++a) 
              <| \() -> equal a (Round.floor 1 b))
            dataFloor1
            dataFloat
         )
      ++ ( List.map2
            (\a b -> 
              test ("floor 2 "++(toString b)++" to "++a) 
              <| \() -> equal a (Round.floor 2 b))
            dataFloor2
            dataFloat
         )

